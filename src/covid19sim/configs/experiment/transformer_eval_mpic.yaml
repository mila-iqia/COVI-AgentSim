# `sample` can be
# - `uniform` (from np.random.uniform(*from))
# - `range` (np.choice(np.arange(*from)))
# - `list` (np.choice(from))
# - `cartesian` special case where a cartesian product of all keys with the `cartesian` sampling scheme
#               is created and iterated over in order. `from` MUST be a list
#               As we iterate over the cartesian product of all
#               such keys, others are sampled as usual. If n_search is larger than the size of the cartesian
#               product, it will cycle again through the product in the same order
#               example with A being `cartesian` from [1, 2] and B from [y, z] and 5 searches:
#                  => {A:1, B: y}, {A:1, B: z}, {A:2, B: y}, {A:2, B: z}, {A:1, B: y}
# - `sequential` samples will loop through the values in `from`. `from` MUST be a list

tune: true
track: light
n_search: -1

n_people: 1500
simulation_days: 50
INTERVENTION_DAY: 0

APP_UPTAKE: 0.8415
init_fraction_sick: 0.0065
P_CAREFUL_PERSON: 0.7
PROPORTION_LAB_TEST_PER_DAY: 0.001
MAKE_HOUSEHOLD_BEHAVE_SAME_AS_MAX_RISK_RESIDENT: True

USE_INFERENCE_SERVER: False
base_dir: /home/nrahaman/python/COVI-AgentSim/exp/streaming
weights_dir: /lustre/work/nrahaman/ctt/exp/SHIPMENTS
use_tmpdir: false

intervention:
  sample: cartesian
  from:
    - transformer:
        weights: MISTY-WOOD-727
        REC_LEVEL_THRESHOLDS: "[0,1,2]"
    - bdt1
    - heuristicv1
    - heuristicv3
    - heuristicv4
    - post-lockdown-no-tracing

GLOBAL_MOBILITY_SCALING_FACTOR:
  sample: cartesian
  from:
    - 0.6
    - 0.7
    - 0.8
    - 0.9
    - 1.0

seed: # for sole reproducibility purposes
  sample: cartesian # loop through list sequentially, in order
  from:
    - 2000
    - 2001
    - 2002
    - 2003
    - 2004
    - 2005
    - 2006
    - 2007
    - 2008
    - 2009
    - 2010
    - 2011
    - 2012
    - 2013
    - 2014
    - 2015
    - 2016
    - 2017
    - 2018
    - 2019
    - 2020

